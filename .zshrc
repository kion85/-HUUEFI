# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="agnosterzak"

plugins=( 
    git
    zsh-autosuggestions
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# Display Pokemon-colorscripts
# Project page: https://gitlab.com/phoneybadger/pokemon-colorscripts#on-other-distros-and-macos
#pokemon-colorscripts --no-title -s -r #without fastfetch
pokemon-colorscripts --no-title -s -r | fastfetch -c $HOME/.config/fastfetch/config-pokemon.jsonc --logo-type file-raw --logo-height 10 --logo-width 5 --logo -

# fastfetch. Will be disabled if above colorscript was chosen to install
#fastfetch -c $HOME/.config/fastfetch/config-compact.jsonc

# Set-up icons for files/directories in terminal using lsd
alias ls='lsd'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

# ==================== HUUEFI EXTENSION PRO ==================== #
# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è .HUUEFI —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º

HUUEFI_CACHE_DIR="$HOME/.huuefi_cache"
mkdir -p "$HUUEFI_CACHE_DIR"

huuefi() {
    if [[ $# -eq 0 ]]; then
        echo "üåÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: huuefi <file.HUUEFI> [–∞—Ä–≥—É–º–µ–Ω—Ç—ã]"
        echo "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ .HUUEFI —Ñ–∞–π–ª—ã:"
        lsd -la *.HUUEFI 2>/dev/null || echo "üì≠ –ù–µ—Ç .HUUEFI —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
        return 1
    fi
    
    local file="$1"
    local absolute_path=$(realpath "$file" 2>/dev/null)
    
    if [[ ! -f "$file" && ! -f "$absolute_path" ]]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '$file' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞"
        return 1
    fi
    
    if [[ -f "$absolute_path" ]]; then
        file="$absolute_path"
    fi
    
    if [[ "$file" != *.HUUEFI ]]; then
        echo "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .HUUEFI!"
        echo "üí° –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ: mv '$file' '${file}.HUUEFI'"
        return 1
    fi

    echo "üîç –ê–Ω–∞–ª–∏–∑ HUUEFI —Ñ–∞–π–ª–∞: $(basename "$file")"
    echo "üìÇ –ü—É—Ç—å: $(dirname "$file")"
    
    # –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    local mode=$(_huuefi_detect_mode "$file")
    local file_hash=$(sha256sum "$file" | cut -d' ' -f1)
    local cache_file="$HUUEFI_CACHE_DIR/$file_hash"
    
    echo "üéØ –†–µ–∂–∏–º: $mode"
    echo "üìä –†–∞–∑–º–µ—Ä: $(du -h "$file" | cut -f1)"
    echo "üÜî –•—ç—à: ${file_hash:0:8}..."
    
    case "$mode" in
        "LIGHT")
            _huuefi_light_mode "$file" "$@"
            ;;
        "PRO_CPP")
            _huuefi_pro_mode "$file" "$cache_file" "$@"
            ;;
        "PRO_ASM")
            _huuefi_asm_mode "$file" "$cache_file" "$@"
            ;;
        "PRO_HYBRID")
            _huuefi_hybrid_mode "$file" "$cache_file" "$@"
            ;;
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª!"
            return 1
            ;;
    esac
}

_huuefi_detect_mode() {
    local file="$1"
    local first_line=$(head -n 1 "$file" 2>/dev/null)
    local second_line=$(sed -n '2p' "$file" 2>/dev/null)
    
    # –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ –ø–µ—Ä–≤–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if [[ "$first_line" == "#!HUUEFI-PRO" ]]; then
        if grep -q "#include" "$file" || grep -q "using namespace" "$file"; then
            echo "PRO_CPP"
        elif grep -q "section .text" "$file" || grep -q "global _" "$file"; then
            echo "PRO_ASM"
        elif grep -q "asm(" "$file" || grep -q "__asm__" "$file"; then
            echo "PRO_HYBRID"
        else
            echo "PRO_CPP" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è PRO
        fi
    elif [[ "$first_line" == "#!/bin/bash" || "$first_line" == "#!/bin/sh" ]]; then
        echo "LIGHT"
    else
        # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if grep -q "#include" "$file" || grep -q "cout\|endl" "$file"; then
            echo "PRO_CPP"
        elif grep -q "mov\|eax\|int 0x80" "$file"; then
            echo "PRO_ASM"
        else
            echo "LIGHT" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        fi
    fi
}

_huuefi_light_mode() {
    local file="$1"
    shift
    
    echo "üêß LIGHT —Ä–µ–∂–∏–º: Bash –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    echo "‚è∞ –ó–∞–ø—É—Å–∫: $(date +%H:%M:%S)"
    echo "‚îÄ"‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚îÄ"‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚îÄ"‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚îÄ"
    
    local start_time=$(date +%s%N)
    bash "$file" "$@"
    local exit_code=$?
    local end_time=$(date +%s%N)
    
    local duration=$(( (end_time - start_time) / 1000000 ))
    echo "‚îÄ"‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚îÄ"‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚îÄ"‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚îÄ"
    echo "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms"
    
    if [[ $exit_code -eq 0 ]]; then
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    else
        echo "‚ö†Ô∏è  –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: $exit_code"
    fi
    
    return $exit_code
}

_huuefi_pro_mode() {
    local file="$1"
    local cache_file="$2"
    shift 2
    
    echo "üîß PRO —Ä–µ–∂–∏–º: C++ –∫–æ–º–ø–∏–ª—è—Ü–∏—è"
    
    if [[ -f "$cache_file" && -x "$cache_file" ]]; then
        echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
        "$cache_file" "$@"
        return $?
    fi
    
    local temp_dir=$(mktemp -d)
    local source_file="$temp_dir/source.cpp"
    local output_bin="$cache_file"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ HUUEFI-PRO)
    if [[ $(head -n 1 "$file") == "#!HUUEFI-PRO" ]]; then
        tail -n +2 "$file" > "$source_file"
    else
        cp "$file" "$source_file"
    fi
    
    echo "üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è C++ –∫–æ–¥–∞..."
    local compile_start=$(date +%s%N)
    
    if g++ -std=c++17 -O2 -o "$output_bin" "$source_file" -lstdc++fs 2>"$temp_dir/compile.log"; then
        local compile_end=$(date +%s%N)
        local compile_time=$(( (compile_end - compile_start) / 1000000 ))
        echo "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ ${compile_time}ms!"
        
        echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
        "$output_bin" "$@"
        local exit_code=$?
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ C++!"
        echo "üìã –õ–æ–≥ –æ—à–∏–±–æ–∫:"
        cat "$temp_dir/compile.log"
        local exit_code=1
    fi
    
    rm -rf "$temp_dir"
    return $exit_code
}

_huuefi_asm_mode() {
    local file="$1"
    local cache_file="$2"
    shift 2
    
    echo "‚ö° PRO —Ä–µ–∂–∏–º: Pure ASM –∫–æ–º–ø–∏–ª—è—Ü–∏—è"
    
    if [[ -f "$cache_file" && -x "$cache_file" ]]; then
        echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
        "$cache_file" "$@"
        return $?
    fi
    
    local temp_dir=$(mktemp -d)
    local source_file="$temp_dir/source.asm"
    local object_file="$temp_dir/source.o"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ASM –∫–æ–¥
    if [[ $(head -n 1 "$file") == "#!HUUEFI-PRO" ]]; then
        tail -n +2 "$file" > "$source_file"
    else
        cp "$file" "$source_file"
    fi
    
    echo "üî® –ê—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ..."
    
    if nasm -f elf64 -g "$source_file" -o "$object_file" 2>"$temp_dir/asm.log"; then
        if ld "$object_file" -o "$cache_file" 2>"$temp_dir/link.log"; then
            echo "‚úÖ ASM —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ!"
            echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
            "$cache_file" "$@"
            local exit_code=$?
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ª–∏–Ω–∫–æ–≤–∫–∏ ASM!"
            cat "$temp_dir/link.log"
            local exit_code=1
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –∞—Å—Å–µ–º–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!"
        cat "$temp_dir/asm.log"
        local exit_code=1
    fi
    
    rm -rf "$temp_dir"
    return $exit_code
}

_huuefi_hybrid_mode() {
    local file="$1"
    local cache_file="$2"
    shift 2
    
    echo "üéØ HYBRID —Ä–µ–∂–∏–º: C++ —Å inline ASM"
    _huuefi_pro_mode "$file" "$cache_file" "$@"
}

newhuuefi() {
    if [[ $# -eq 0 ]]; then
        echo "üåÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: newhuuefi <–∏–º—è> [—Ä–µ–∂–∏–º]"
        echo "   –†–µ–∂–∏–º—ã: light, pro-cpp, pro-asm, pro-hybrid"
        echo "   –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: light"
        return 1
    fi
    
    local filename="$1"
    local mode="${2:-light}"
    
    if [[ "$filename" != *.HUUEFI ]]; then
        filename="${filename}.HUUEFI"
    fi
    
    if [[ -f "$filename" ]]; then
        echo "‚ùå –§–∞–π–ª '$filename' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
        return 1
    fi
    
    case "$mode" in
        light|LIGHT)
            echo "üêß –°–æ–∑–¥–∞—é LIGHT .HUUEFI —Ñ–∞–π–ª"
            echo "#!/bin/bash" > "$filename"
            echo "# HUUEFI LIGHT mode - Bash script" >> "$filename"
            echo "# Created: $(date +"%Y-%m-%d %H:%M:%S")" >> "$filename"
            echo "" >> "$filename"
            echo "echo \"üöÄ HUUEFI LIGHT —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!\"" >> "$filename"
            echo "echo \"–ê—Ä–≥—É–º–µ–Ω—Ç—ã: \$@\"" >> "$filename"
            echo "echo \"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: \$(pwd)\"" >> "$filename"
            echo "" >> "$filename"
            echo "# –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ bash-–∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ" >> "$filename"
            ;;
            
        pro-cpp|PRO-CPP)
            echo "üîß –°–æ–∑–¥–∞—é PRO .HUUEFI —Ñ–∞–π–ª (C++)"
            echo "#!HUUEFI-PRO" > "$filename"
            cat >> "$filename" << 'EOF'
// HUUEFI PRO —Ä–µ–∂–∏–º - C++ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π
// –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫

#include <iostream>
#include <vector>
#include <string>

using namespace std;

class HUUEFI_Program {
private:
    vector<string> args;
    
public:
    HUUEFI_Program(int argc, char* argv[]) {
        for (int i = 0; i < argc; ++i) {
            args.push_back(argv[i]);
        }
    }
    
    void run() {
        cout << "üöÄ HUUEFI PRO C++ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!" << endl;
        cout << "üìä –ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤: " << args.size() - 1 << endl;
        cout << "üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ";
        
        // –î–µ—Ç–µ–∫—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ ASM
        #ifdef __linux__
            cout << "Linux x86_64" << endl;
        #elif _WIN32
            cout << "Windows" << endl;
        #else
            cout << "Unknown" << endl;
        #endif
        
        cout << "üïí –í—Ä–µ–º—è: " << __TIME__ << endl;
    }
    
    ~HUUEFI_Program() {
        cout << "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" << endl;
    }
};

int main(int argc, char* argv[]) {
    HUUEFI_Program program(argc, argv);
    program.run();
    
    // Inline ASM –ø—Ä–∏–º–µ—Ä
    asm volatile (
        "mov $1, %%rax\n\t"
        "nop\n\t"
        : 
        : 
        : "%rax"
    );
    
    return 0;
}
EOF
            ;;
            
        pro-asm|PRO-ASM)
            echo "‚ö° –°–æ–∑–¥–∞—é PRO .HUUEFI —Ñ–∞–π–ª (Pure ASM)"
            echo "#!HUUEFI-PRO" > "$filename"
            cat >> "$filename" << 'EOF'
; HUUEFI PRO —Ä–µ–∂–∏–º - Pure ASM
; NASM —Å–∏–Ω—Ç–∞–∫—Å–∏—Å

section .data
    hello db 'üöÄ HUUEFI Pure ASM —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!', 0xA
    hello_len equ $ - hello
    
    args_msg db 'üìä –ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤: ', 0
    args_len equ $ - args_msg

section .bss
    arg_count resb 1

section .text
    global _start

_start:
    ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    pop rcx
    mov [arg_count], cl
    
    ; –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    mov rax, 1                  ; sys_write
    mov rdi, 1                  ; stdout
    mov rsi, hello
    mov rdx, hello_len
    syscall
    
    ; –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    mov rax, 1
    mov rdi, 1
    mov rsi, args_msg
    mov rdx, args_len
    syscall
    
    ; –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –≤ ASCII –∏ –≤—ã–≤–æ–¥–∏–º
    mov al, [arg_count]
    dec al                      ; –£–±–∏—Ä–∞–µ–º –∏–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    add al, '0'
    mov [arg_count], al
    
    mov rax, 1
    mov rdi, 1
    mov rsi, arg_count
    mov rdx, 1
    syscall
    
    ; –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    mov rax, 1
    mov rdi, 1
    mov rsi, newline
    mov rdx, 1
    syscall
    
    ; –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    mov rax, 60                 ; sys_exit
    xor rdi, rdi                ; –∫–æ–¥ 0
    syscall

section .data
    newline db 0xA
EOF
            ;;
            
        pro-hybrid|PRO-HYBRID)
            echo "üéØ –°–æ–∑–¥–∞—é HYBRID .HUUEFI —Ñ–∞–π–ª (C++ + ASM)"
            echo "#!HUUEFI-PRO" > "$filename"
            cat >> "$filename" << 'EOF'
// HUUEFI HYBRID —Ä–µ–∂–∏–º - C++ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º ASM

#include <iostream>
#include <cstdint>

using namespace std;

// ASM —Ñ—É–Ω–∫—Ü–∏–∏
extern "C" {
    uint64_t asm_get_timestamp();
    void asm_syscall(uint64_t code, uint64_t arg1, uint64_t arg2, uint64_t arg3);
}

class AdvancedHUUEFI {
private:
    int argc;
    char** argv;
    
public:
    AdvancedHUUEFI(int arg_count, char** arg_values) 
        : argc(arg_count), argv(arg_values) {}
    
    void demonstrate() {
        cout << "üéØ HUUEFI HYBRID —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω!" << endl;
        cout << "üîß –ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤: " << argc - 1 << endl;
        
        // –í—ã–∑–æ–≤ ASM —Ñ—É–Ω–∫—Ü–∏–∏
        uint64_t timestamp = asm_get_timestamp();
        cout << "‚è∞ ASM timestamp: " << timestamp << endl;
        
        // –°–ª–æ–∂–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        perform_calculations();
    }
    
    void perform_calculations() {
        // –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å ASM –≤—Å—Ç–∞–≤–∫–∞–º–∏
        volatile double result = 0.0;
        
        for (int i = 0; i < 1000000; ++i) {
            // ASM –≤—Å—Ç–∞–≤–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            asm volatile (
                "fldl %1\n\t"
                "fsin\n\t"
                "fstpl %0\n\t"
                : "=m" (result)
                : "m" (result)
            );
        }
        
        cout << "üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: " << result << endl;
    }
};

int main(int argc, char* argv[]) {
    AdvancedHUUEFI program(argc, argv);
    program.demonstrate();
    return 0;
}

// ASM —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
asm(
".global asm_get_timestamp\n"
"asm_get_timestamp:\n"
"    rdtsc\n"
"    shl $32, %rdx\n"
"    or %rdx, %rax\n"
"    ret\n"

".global asm_syscall\n"
"asm_syscall:\n"
"    mov %rcx, %r10\n"
"    mov %rdx, %r8\n"
"    mov %rsi, %r9\n"
"    mov %rdi, %rax\n"
"    syscall\n"
"    ret\n"
);
EOF
            ;;
            
        *)
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $mode"
            return 1
            ;;
    esac
    
    chmod +x "$filename"
    echo "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: $filename"
    echo "üìè –†–∞–∑–º–µ—Ä: $(du -h "$filename" | cut -f1)"
    echo "üöÄ –ó–∞–ø—É—Å–∫: huuefi $filename"
}

huuefi-batch() {
    if [[ $# -eq 0 ]]; then
        echo "üåÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: huuefi-batch <—Ñ–∞–π–ª1> <—Ñ–∞–π–ª2> ..."
        return 1
    fi
    
    local converted=0
    local skipped=0
    
    for file in "$@"; do
        if [[ ! -f "$file" ]]; then
            echo "‚ùå –§–∞–π–ª '$file' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é..."
            ((skipped++))
            continue
        fi
        
        local huuefi_file="${file}.HUUEFI"
        if [[ -f "$huuefi_file" ]]; then
            echo "‚ö†Ô∏è  –§–∞–π–ª '$huuefi_file' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é..."
            ((skipped++))
            continue
        fi
        
        # –ê–≤—Ç–æ–¥–µ—Ç–µ–∫—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file "$file" | grep -q "C++ source"; then
            echo "#!HUUEFI-PRO" > "$huuefi_file"
            cat "$file" >> "$huuefi_file"
            echo "üîß –°–æ–∑–¥–∞–Ω PRO wrapper: $huuefi_file"
        elif file "$file" | grep -q "Bash script"; then
            echo "#!/bin/bash" > "$huuefi_file"
            cat "$file" >> "$huuefi_file"
            echo "üêß –°–æ–∑–¥–∞–Ω LIGHT wrapper: $huuefi_file"
        else
            echo "#!/bin/bash" > "$huuefi_file"
            echo "# Wrapped: $file" >> "$huuefi_file"
            echo "bash \"$(realpath "$file")\" \"\$@\"" >> "$huuefi_file"
            echo "üì¶ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π wrapper: $huuefi_file"
        fi
        
        chmod +x "$huuefi_file"
        ((converted++))
    done
    
    echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ: $converted, –ø—Ä–æ–ø—É—â–µ–Ω–æ: $skipped"
}

huuefi-clean() {
    echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ HUUEFI..."
    local cache_size=$(du -sh "$HUUEFI_CACHE_DIR" 2>/dev/null | cut -f1)
    rm -rf "$HUUEFI_CACHE_DIR"/*
    echo "‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω (–±—ã–ª–æ: ${cache_size:-0B})"
}

huuefi-info() {
    echo "üìä HUUEFI System Information:"
    echo "‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå"‚ïê"
    echo "üìÅ –ö—ç—à: $HUUEFI_CACHE_DIR"
    echo "üìè –†–∞–∑–º–µ—Ä –∫—ç—à–∞: $(du -sh "$HUUEFI_CACHE_DIR" 2>/dev/null || echo "0B")"
    echo "üîß –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã:"
    which g++ >/dev/null 2>&1 && echo "   ‚úÖ g++: $(g++ --version | head -n1)" || echo "   ‚ùå g++: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    which nasm >/dev/null 2>&1 && echo "   ‚úÖ nasm: $(nasm -v)" || echo "   ‚ùå nasm: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    which ld >/dev/null 2>&1 && echo "   ‚úÖ ld: GNU ld" || echo "   ‚ùå ld: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
_huuefi_autocomplete() {
    _files -g "*.HUUEFI"
}
compdef _huuefi_autocomplete huuefi

# –ê–ª–∏–∞—Å—ã
alias .h='huuefi '
alias .n='newhuuefi '
alias .l='lsd -la *.HUUEFI 2>/dev/null || echo "üì≠ –ù–µ—Ç .HUUEFI —Ñ–∞–π–ª–æ–≤"'
alias .e='nano '
alias .c='cat '
alias .clean='huuefi-clean'
alias .info='huuefi-info'

huuefi-help() {
    echo "üåà HUUEFI EXTENSION COMMANDS:"
    echo "‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå‚ïê‚ïå‚îÑ‚îà‚îâ‚îâ‚îà‚îÑ‚ïå‚ïê"
    echo "  huuefi file.HUUEFI      - üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å HUUEFI —Ñ–∞–π–ª"
    echo "  newhuuefi name [mode]   - üõ†Ô∏è  –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª"
    echo "  huuefi-batch files      - üîÑ –°–æ–∑–¥–∞—Ç—å –æ–±–µ—Ä—Ç–∫–∏"
    echo "  huuefi-clean            - üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"
    echo "  huuefi-info             - üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"
    echo "  huuefi-help             - üìñ –°–ø—Ä–∞–≤–∫–∞"
    echo ""
    echo "üìÅ FILE MANAGEMENT ALIASES:"
    echo "  .l                     - üìã –ü–æ–∫–∞–∑–∞—Ç—å HUUEFI —Ñ–∞–π–ª—ã"
    echo "  .e file.HUUEFI         - ‚úèÔ∏è  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    echo "  .c file.HUUEFI         - üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
    echo "  .h file.HUUEFI         - ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
    echo "  .clean                 - üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
    echo "  .info                  - üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    echo ""
    echo "üéØ –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:"
    echo "  üêß LIGHT      - Bash —Å–∫—Ä–∏–ø—Ç—ã"
    echo "  üîß PRO-CPP    - C++ –∫–æ–º–ø–∏–ª—è—Ü–∏—è"
    echo "  ‚ö° PRO-ASM    - Pure ASM"
    echo "  üéØ PRO-HYBRID - C++ —Å inline ASM"
    echo ""
    echo "üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤!"
    echo "   –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞"
}

echo "üåÄ HUUEFI PRO extension loaded! Type 'huuefi-help' for commands"
huuefi-info
